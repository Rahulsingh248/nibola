#ifdef ESP32
#include <WiFi.h>
#else
#include <ESP8266WiFi.h>
#endif
#include <WiFiClientSecure.h>
#include <UniversalTelegramBot.h>   
#include <ArduinoJson.h>
#include<Servo.h>
Servo SERVO;
const char* ssid = "Naruto";;
const char* password = "N@rutovaibhav1";
#define BOTtoken "5568649983:AAGD8oiOsylnhZs2S8QWEwGg4qsJ6MKgcFE"  
#define CHAT_ID "2034704724"
WiFiClientSecure client;
UniversalTelegramBot bot(BOTtoken, client);
// Checks for new messages every 1 second.
int botRequestDelay = 100;
unsigned long lastTimeBotRan;
int Speed =180 ;int Speedturn=150 ;
#define pin1 D1 // Motor Driver pins.
#define pin2 D2
#define pin3 D3
#define pin4 D4
#define BUZZER D5

// Handle new receive messages
void handleNewMessages(int numNewMessages) {
  Serial.println("handleNewMessages");
  Serial.println(String(numNewMessages));
  for (int i=0; i<numNewMessages; i++) {
    // Chat id of the requester
    String chat_id = String(bot.messages[i].chat_id);
    if (chat_id != CHAT_ID){
      bot.sendMessage(chat_id, "Unauthorized user", "");
      continue;
    }
    // Print the received message
    String text = bot.messages[i].text;
    Serial.println(text);
    String from_name = bot.messages[i].from_name;
    if (text == "/start") {
      String welcome = "Welcome, " + from_name + ".\n";
      welcome += "Use the following commands to control Nibola. \n";
      welcome += "Select speed \n";
      welcome += "/s1=slow \n ";
      welcome += "/s2=moderate \n ";
      welcome += "/s3=fast \n ";
      welcome += "Select turn type \n ";
      welcome += "/T1=low cut. \n ";
      welcome += "/T2=mid cut. \n ";
      welcome += "/T3=srp cut. \n ";
      welcome += "/F move forward \n ";
      welcome += "/B move backward \n ";
      welcome += "/L left turn \n ";
      welcome += "/LF left+forward \n ";
      welcome += "/R right turn \n ";
      welcome += "/RF right+forward \n ";
      welcome += "/S Stop \n";
      welcome += "/Spn Stop \n";
      welcome += "/B1 buzzer on \n";
      welcome += "/c0 servo at 0 deg \n";
      welcome += "/c1 servo at 15 deg \n";
      welcome += "/c2 servo at 30 deg \n";
      welcome += "/c3 servo at 45 deg \n";
      bot.sendMessage(chat_id, welcome, "");
    }
    if (text == "/s1") {
      bot.sendMessage(chat_id, "speed set =slow", "");
      Speed=150;
    }
    if (text == "/s2") {
      bot.sendMessage(chat_id, "speed set =mid", "");
       Speed=200;
    }
    if (text == "/s3") {
      bot.sendMessage(chat_id, "speed set =fast", "");
      Speed=255;
    }
    if (text == "/T1") {
      bot.sendMessage(chat_id, "turn ang. low", "");
      Speedturn=145;
    }
    if (text == "/T2") {
      bot.sendMessage(chat_id, "turn ang. mid", "");
      Speedturn=189;
    }
    if (text == "/T3") {
      bot.sendMessage(chat_id, "turn ang. high", "");
      Speedturn=245;
    }
    if (text == "/F") {
      bot.sendMessage(chat_id, "moving forward", "");
      analogWrite(pin2, Speed);
      analogWrite(pin4, Speed);
      analogWrite(pin1, 0);
      analogWrite(pin3, 0); 
    }
    if (text == "/B") {
      bot.sendMessage(chat_id, "moving Backward", "");
       analogWrite(pin1, 0);
      analogWrite(pin2, 0);
      analogWrite(pin3, 0);
      analogWrite(pin4, 0);
      delay(1000);
      analogWrite(pin1, 150);
      analogWrite(pin3, 150); 
    }
    if (text == "/R") {
      bot.sendMessage(chat_id, "Right turn", "");
      analogWrite(pin3, 0);
      analogWrite(pin2, 0);
      analogWrite(pin1, Speedturn);
      analogWrite(pin4, 0);
      delay(500);
      analogWrite(pin1,0);
      analogWrite(pin4,0);
    }
    if (text == "/RF") {
      bot.sendMessage(chat_id, "Right Forward", "");
      analogWrite(pin1, 0);
      analogWrite(pin3, 0);
      analogWrite(pin2, Speed);
      analogWrite(pin4, Speedturn);; 
    }
    if (text == "/L") {
      bot.sendMessage(chat_id, "left turn", "");
      analogWrite(pin1, 0);
      analogWrite(pin4, 0);
      analogWrite(pin2, 0);
      analogWrite(pin3, Speedturn);
      delay(500);
      analogWrite(pin2,0);
      analogWrite(pin3,0);
    }
    if (text == "/LF") {
      bot.sendMessage(chat_id, "Left Forward", "");
      analogWrite(pin1, 0);
      analogWrite(pin3, 0);
      analogWrite(pin2, Speedturn);
      analogWrite(pin4, Speed); 
    }
    if (text == "/S") {
      bot.sendMessage(chat_id, "bot stopped", "");
      analogWrite(pin1, 0);
      analogWrite(pin2, 0);
      analogWrite(pin3, 0);
      analogWrite(pin4, 0);
    }
    if (text == "/Spn") {
      bot.sendMessage(chat_id, "spinning", "");
       analogWrite(pin3, 0);
      analogWrite(pin2, 0);
      analogWrite(pin1, Speed);
      analogWrite(pin4, 0);
    }
    if (text == "/B1") {
      bot.sendMessage(chat_id, "buzzer on", "");
      digitalWrite(BUZZER, HIGH);delay(50);digitalWrite(BUZZER, LOW);delay(50);
      digitalWrite(BUZZER, HIGH);delay(150);digitalWrite(BUZZER, LOW);delay(50);
      digitalWrite(BUZZER, HIGH);delay(200);digitalWrite(BUZZER, LOW);delay(50);
      digitalWrite(BUZZER, HIGH);delay(400);digitalWrite(BUZZER, LOW);delay(50);
      digitalWrite(BUZZER, HIGH);delay(150);digitalWrite(BUZZER, LOW);
    }
    if (text == "/c0") {
      bot.sendMessage(chat_id, "servo at 0 deg", "");
      SERVO.write(0);
    }
    if (text == "/c1") {
      bot.sendMessage(chat_id, "servo at 15 deg", "");
      SERVO.write(30);
    }
    if (text == "/c2") {
      bot.sendMessage(chat_id, "servo at 30 deg", "");
      SERVO.write(60);
    }
    if (text == "/c3") {
      bot.sendMessage(chat_id, "servo at 45 deg", "");
      SERVO.write(90);
    }
}
}
void setup() {
  Serial.begin(115200);
  #ifdef ESP8266
    client.setInsecure();
  #endif
  pinMode(pin1, OUTPUT);
  pinMode(pin2, OUTPUT);
  pinMode(pin3, OUTPUT);
  pinMode(pin4, OUTPUT);
  pinMode(BUZZER, OUTPUT);
  SERVO.attach(D0);
 SERVO.write(0);
  // Connect to Wi-Fi
  WiFi.mode(WIFI_STA);
  WiFi.begin(ssid, password);
  WiFi.setSleep(false);
  while (WiFi.status() != WL_CONNECTED) {
    delay(1000);
    Serial.println("Connecting to WiFi..");
  }
  // Print ESP32 Local IP Address
  Serial.println(WiFi.localIP());
}
void loop() {
  if (millis() > lastTimeBotRan + botRequestDelay)  {
    int numNewMessages = bot.getUpdates(bot.last_message_received + 1);
    while(numNewMessages) {
      Serial.println("got response");
      handleNewMessages(numNewMessages);
      numNewMessages = bot.getUpdates(bot.last_message_received + 1);
    }
    lastTimeBotRan = millis();
  }
}
